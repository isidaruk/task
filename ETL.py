"""
Loader

Script is used for building a local database, and ETL the CSV file to the database

Input
jobs.csv

Output
a database store with jobs records
"""
import csv
import psycopg2 # PostgreSQL database adapter.


con = None
try:
    con_string = "host='localhost' dbname='jobs' user='postgres' password='postgres'"
    con = psycopg2.connect(con_string) # Connect to the PostgreSQL database.
    

    print('Database connection opened successfully.')

    cur = con.cursor()

    # Display the PostgreSQL database server version.
    cur.execute('SELECT version()')
    db_version = cur.fetchone()[0]
    print('PostgreSQL database version:', db_version)

    # Create table Jobs.
    cur.execute('''
    DROP TABLE IF EXISTS Jobs CASCADE;
    CREATE TABLE Jobs(
    Job_Id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Job_Title TEXT NOT NULL,
    Category TEXT NOT NULL,
    Status TEXT NOT NULL);
    ''')

    # Create table Locations.
    cur.execute('''
    DROP TABLE IF EXISTS Locations CASCADE;
    CREATE TABLE Locations(
    Location_Id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Location TEXT NOT NULL);
    ''')

    # Create intermediate table Jobs_Locations.
    cur.execute('''
    DROP TABLE IF EXISTS Jobs_Locations CASCADE; 
    CREATE TABLE Jobs_Locations(
    Job_Id INT NOT NULL,
    Location_Id INT NOT NULL,
    PRIMARY KEY(Job_Id, Location_Id),
    FOREIGN KEY (Job_Id)
        REFERENCES Jobs (Job_Id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (Location_Id)
        REFERENCES Locations (Location_Id)
        ON UPDATE CASCADE ON DELETE CASCADE
    );''')
 
    # Create temporary table Temporary.
    cur.execute('''
    DROP TABLE IF EXISTS Temporary CASCADE;
    CREATE TABLE Temporary(
    Id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Job_Id INT NOT NULL,
    Location TEXT NOT NULL
    );''')

    con.commit() # Commit the changes.


    with open('snap.csv', 'r') as csvfile:
        reader = csv.reader(csvfile)
        next(reader) # Skip the header row.

        all_locations = []

        for row in reader:
            # Insert data to table Jobs.    
            cur.execute('''
            INSERT INTO Jobs (Job_Title, Category, Status)
            VALUES (%s, %s, %s) RETURNING
            Job_Id;
            ''',
            (row[0], row[1], row[2], ))

            job_id = cur.fetchone()[0] # Get the Job_Id for the Jobs_Location junction table.
            # print(job_id)
            
            # Split the Location column with multiple value on one row to it's values on multiple rows.
            loc_splitted = row[3].split('; ') # There is a problem with ' ' as delimiter.
            len_splitted = len(loc_splitted) 
            
            while len_splitted != 0:

                for loc in loc_splitted:

                    if loc not in all_locations:
                        all_locations.append(loc) # Get list of all different Location.

                    # Insert data to table Temporary.    
                    cur.execute('''
                    INSERT INTO Temporary (Job_Id, Location)
                    VALUES (%s, %s);
                    ''',
                    (job_id, loc))

                    len_splitted -= 1


        # Insert data to table Locations in alphabetical order.
        all_locations.sort()
        
        for loc in all_locations:
            cur.execute('''
                    INSERT INTO Locations (Location)
                    VALUES (%s);
                    ''',
                    (loc, ))

        # print(all_locations)


        cur.execute('''
        SELECT Job_Id FROM Temporary;
        ''')

        all_job_ids = cur.fetchall()
        # print(len(all_job_ids))

        i = 0

        for job_id in all_job_ids:
            # print(job_id)
            job_id = job_id[0]
            
            cur.execute('''
            SELECT Location FROM Temporary;
            ''')

            locations = cur.fetchall()
            # print(locations)

            loc = locations[i][0]
            cur.execute('''
            SELECT Location_Id FROM Locations WHERE Location = (%s);
            ''',
            (loc, ))

            location_id = cur.fetchone()[0]
            # print(location_id)

            # Insert Job_Id and Location_Id into Jobs_Locations table.
            cur.execute('''
                        INSERT INTO Jobs_Locations (Job_Id, Location_Id)
                        VALUES (%s, %s);
                        ''',
                        (job_id, location_id, ))

            i += 1
               

        # Delete temporary table Temporary.
        cur.execute('DROP TABLE IF EXISTS Temporary;')
        
        con.commit() # Commit the transactions.

except (Exception, psycopg2.DatabaseError) as error:
    print(error)
finally:
    if con is not None:
        con.close()

